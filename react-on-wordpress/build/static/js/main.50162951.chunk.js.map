{"version":3,"sources":["components/Pagination/Pagination.tsx","components/Card/Card.tsx","components/DraggableListItem/DraggableListItem.tsx","components/OverwriteComponent/OverwirteComponent.tsx","containers/EditMode/EditMode.tsx","containers/WrapContainer/WrapContainer.tsx","containers/App.tsx","serviceWorker.ts","index.tsx"],"names":["CustomizedPagination","styled","BPagination","Pagination","this","props","pageCount","currentPage","onPaginationClick","Array","from","length","v","i","map","PaginationItem","key","active","onClick","PaginationLink","previous","renderPageItem","next","React","defaultProps","Card","item","CardImg","top","width","src","thumbnail","alt","CardBody","CardTitle","name","CardText","description","href","viewDetailsURL","className","target","rel","ListItemContainer","div","DetailContainer","ListItemComponent","formattedDuration","DraggableListItem","index","id","draggableId","toString","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","AppRow","Row","AppCol","Col","EditMode","isDraggingOver","background","padding","list","onDragEnd","onEditCancelClick","onEditSaveClick","Button","color","droppableId","droppableProps","style","getListStyle","renderListItem","placeholder","WrapContainer","wrapPrefix","children","App","state","loadedList","editingList","editMode","reorder","startIndex","endIndex","result","splice","removed","nextPage","setState","onEditClick","prevState","onItemDragEnd","destination","reorderedList","source","axios","get","then","res","data","Math","ceil","catch","reason","console","error","loadData","offset","slice","Container","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.50162951.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Pagination as BPagination, PaginationItem, PaginationLink } from 'reactstrap'\nimport styled from 'styled-components'\n\ninterface Props {\n  pageCount: number\n  currentPage: number\n  onPaginationClick: (i: number) => void\n}\n\nconst CustomizedPagination = styled(BPagination)`\n  > ul {\n    position: relative;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nexport class Pagination extends React.Component<Props> {\n  static defaultProps = {}\n\n  renderPageItem() {\n    const { pageCount, currentPage, onPaginationClick } = this.props\n    const temp = Array.from({ length: pageCount }, (v, i) => i + 1)\n    return temp.map((i) => (\n      <PaginationItem key={`pi-${i}`} active={currentPage === i} onClick={() => onPaginationClick(i)}>\n        <PaginationLink>{i}</PaginationLink>\n      </PaginationItem>\n    ))\n  }\n\n  render() {\n    const { currentPage, onPaginationClick } = this.props\n    return (\n      <CustomizedPagination>\n        <PaginationItem onClick={() => onPaginationClick(currentPage - 1)}>\n          <PaginationLink previous />\n        </PaginationItem>\n        {this.renderPageItem()}\n        <PaginationItem onClick={() => onPaginationClick(currentPage + 1)}>\n          <PaginationLink next />\n        </PaginationItem>\n      </CustomizedPagination>\n    )\n  }\n}\n","import * as React from 'react';\nimport { Card as BCard, CardImg, CardText, CardBody, CardTitle } from 'reactstrap'\n\nimport { ListItem } from '../../type'\n\ninterface Props {\n  item: ListItem\n}\n\nexport const Card: React.FunctionComponent<Props> = ({item}) => (\n  <BCard>\n    <CardImg top width=\"100%\" src={item.thumbnail} alt=\"Card image cap\" />\n    <CardBody>\n      <CardTitle><h3>{item.name}</h3></CardTitle>\n      <CardText>{item.description}</CardText>\n      <a href={item.viewDetailsURL} className=\"btn btn-secondary\" target=\"_blank\" rel=\"noopener noreferrer\">\n        View details\n      </a>\n    </CardBody>\n  </BCard>\n)\n","import * as React from 'react'\nimport { Draggable } from 'react-beautiful-dnd'\n\nimport { ListItem } from '../../type'\nimport styled from 'styled-components'\n\nconst ListItemContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 4fr;\n  margin: 10px auto;\n  box-sizing: border-box;\n  background: rgb(55, 55, 55);\n  color: white;\n`\nconst DetailContainer = styled.div`\n  padding: 5px 0;\n`\n\ntype Props = {\n  item: ListItem\n}\n\nexport const ListItemComponent: React.FunctionComponent<Props> = ({ item }) => (\n  <ListItemContainer>\n    <img src={item.thumbnail} alt=\"\" />\n    <DetailContainer>\n      <h3>\n        {' '}\n        {item.name} ({item.formattedDuration})\n      </h3>\n      <p>{item.description}</p>\n    </DetailContainer>\n  </ListItemContainer>\n)\n\nexport const DraggableListItem: React.FunctionComponent<{ item: ListItem; index: number }> = ({ item, index }) => (\n  <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n    {(provided, snapshot) => (\n      <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n        <ListItemComponent item={item} />\n      </div>\n    )}\n  </Draggable>\n)\n","import styled from 'styled-components'\nimport {Col, Row} from 'reactstrap'\n\nexport const AppRow = styled(Row)`\n  display: grid !important;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-column-gap: 10px;\n  grid-row-gap: 10px;\n  margin-left: 0 !important;\n  margin-right: 0 !important;\n`\nexport const AppCol = styled(Col)`\n  margin: 10px auto;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-column-gap: 10px;\n`\n","import * as React from 'react'\nimport { DragDropContext, Droppable, OnDragEndResponder } from 'react-beautiful-dnd'\nimport { Button, Row } from 'reactstrap'\n\nimport { ListItem } from '../../type'\nimport { DraggableListItem } from '../../components/DraggableListItem/DraggableListItem'\nimport {AppCol} from '../../components/OverwriteComponent/OverwirteComponent'\n\ninterface Props {\n  list: ListItem[]\n  onDragEnd: OnDragEndResponder\n  onEditSaveClick: VoidFunction\n  onEditCancelClick: VoidFunction\n}\n\nexport class EditMode extends React.Component<Props> {\n  static defaultProps = {}\n\n  getListStyle(isDraggingOver: boolean) {\n    return {\n      background: isDraggingOver ? 'lightgrey' : 'white',\n      padding: 10,\n    }\n  }\n\n  renderListItem() {\n    const { list } = this.props\n    return list.map((item, index) => <DraggableListItem key={`draggable-${item.id}`} item={item} index={index} />)\n  }\n\n  render() {\n    const {onDragEnd, onEditCancelClick, onEditSaveClick} = this.props\n    return (\n      <>\n        <Row>\n          <AppCol>\n            <Button color=\"success\" onClick={onEditSaveClick}>Save</Button>\n            <Button color=\"danger\" onClick={onEditCancelClick}>Cancel</Button>\n          </AppCol>\n        </Row>\n        <Row>\n          <AppCol>          <p>Drag to reorder the list</p>\n          </AppCol>\n        </Row>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <div {...provided.droppableProps} ref={provided.innerRef} style={this.getListStyle(snapshot.isDraggingOver)}>\n                {this.renderListItem()}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </>\n    )\n  }\n}\n","import * as React from 'react'\n\ninterface Props {\n  wrapPrefix: string\n}\n\nexport const WrapContainer: React.FunctionComponent<Props> = ({ wrapPrefix, children }) => (\n  <div className={`${wrapPrefix}-1`}>\n    <div className={`${wrapPrefix}-2`}>\n      <div className={`${wrapPrefix}-3`}>{children}</div>\n    </div>\n  </div>\n)\n","import axios from 'axios'\nimport React from 'react'\nimport { Button, Container, Row } from 'reactstrap'\nimport { DropResult } from 'react-beautiful-dnd'\n\nimport { ListItem } from '../type'\nimport { Pagination } from '../components/Pagination/Pagination'\nimport { Card } from '../components/Card/Card'\nimport { EditMode } from './EditMode/EditMode'\nimport { AppCol, AppRow } from '../components/OverwriteComponent/OverwirteComponent'\nimport { WrapContainer } from './WrapContainer/WrapContainer'\n\nconst URL = 'https://academy.apnic.net/wp-json/academy/virtual-labs'\nconst MAX_CARD_ON_ONE_PAGE = 5\n\ninterface Props {}\n\ninterface State {\n  loadedList: ListItem[]\n  editingList: ListItem[]\n  pageCount: number\n  currentPage: number\n  editMode: boolean\n}\n\nexport class App extends React.Component<Props, State> {\n  static defaultProps = {}\n  state = {\n    loadedList: [],\n    editingList: [],\n    pageCount: 0,\n    currentPage: 1,\n    editMode: false,\n  }\n\n  /**\n   * Loading the data from the api\n   */\n  loadData() {\n    axios\n      .get(URL)\n      .then((res) => {\n        this.setState({\n          loadedList: res.data['virtualLabs'],\n          pageCount: Math.ceil(res.data['virtualLabs'].length / MAX_CARD_ON_ONE_PAGE),\n        })\n      })\n      .catch((reason: Error) => {\n        console.error(reason)\n      })\n  }\n\n  /**\n   * Helper to reorder the list after dragging\n   * @param list\n   * @param startIndex\n   * @param endIndex\n   */\n  reorder = (list: ListItem[], startIndex: number, endIndex: number): ListItem[] => {\n    const result = Array.from(list)\n    const [removed] = result.splice(startIndex, 1)\n    result.splice(endIndex, 0, removed)\n    return result\n  }\n\n  componentDidMount() {\n    this.loadData()\n  }\n\n  onPaginationClick = (i: number) => {\n    let nextPage = i\n    if (nextPage < 1) {\n      nextPage = 1\n    } else if (nextPage > this.state.pageCount) {\n      nextPage = this.state.pageCount\n    }\n\n    this.setState({\n      currentPage: nextPage,\n    })\n  }\n\n  onEditClick = () => {\n    this.setState((prevState) => ({\n      editMode: !prevState.editMode,\n      editingList: prevState.loadedList,\n    }))\n  }\n\n  onEditSaveClick = () => {\n    this.setState((prevState) => ({\n      loadedList: prevState.editingList,\n      editMode: false,\n    }))\n  }\n\n  onEditCancelClick = () => {\n    this.setState((prevState) => ({\n      editingList: prevState.loadedList,\n      editMode: false,\n    }))\n  }\n\n  onItemDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return\n    }\n    const reorderedList = this.reorder(this.state.editingList, result.source.index, result.destination.index)\n    this.setState({\n      editingList: reorderedList,\n    })\n  }\n\n  renderListItem() {\n    const { currentPage, loadedList } = this.state\n    const offset = (currentPage - 1) * MAX_CARD_ON_ONE_PAGE\n    const endIndex = offset + MAX_CARD_ON_ONE_PAGE\n    return loadedList.slice(offset, endIndex).map((item: ListItem) => <Card key={item.id} item={item} />)\n  }\n\n  render() {\n    const { currentPage, pageCount, editMode, editingList } = this.state\n    return (\n      <WrapContainer wrapPrefix=\"apnic-react-in-wordpress\">\n        <Container>\n          {!editMode && (\n            <>\n              <Row>\n                <AppCol>\n                  <Pagination currentPage={currentPage} pageCount={pageCount} onPaginationClick={this.onPaginationClick} />\n                  <Button color=\"primary\" onClick={this.onEditClick}>\n                    Reorder\n                  </Button>\n                </AppCol>\n              </Row>\n              <AppRow>{this.renderListItem()}</AppRow>\n            </>\n          )}\n          {editMode && (\n            <EditMode\n              list={editingList}\n              onDragEnd={this.onItemDragEnd}\n              onEditSaveClick={this.onEditSaveClick}\n              onEditCancelClick={this.onEditCancelClick}\n            />\n          )}\n        </Container>\n      </WrapContainer>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}